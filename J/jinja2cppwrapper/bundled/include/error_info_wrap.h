#ifndef ERROR_INFO_WRAP_H
#define ERROR_INFO_WRAP_H

#ifdef __cplusplus
#include <jinja2cpp/error_info.h>
#include <stddef.h>

using jinja2cpp_error_info_t = jinja2::ErrorInfo;

extern "C" {
#endif

// Определение кода ошибки
typedef enum jinja2cpp_error_code_t {
    JINJA2CPP_ERROR_UNSPECIFIED = 0,
    JINJA2CPP_ERROR_UNEXPECTED_EXCEPTION = 1,
    JINJA2CPP_ERROR_YET_UNSUPPORTED,
    JINJA2CPP_ERROR_FILE_NOT_FOUND,
    JINJA2CPP_ERROR_EXTENSION_DISABLED,
    JINJA2CPP_ERROR_TEMPLATE_ENV_ABSENT,
    JINJA2CPP_ERROR_TEMPLATE_NOT_FOUND,
    JINJA2CPP_ERROR_TEMPLATE_NOT_PARSED,
    JINJA2CPP_ERROR_INVALID_VALUE_TYPE,
    JINJA2CPP_ERROR_INVALID_TEMPLATE_NAME,
    JINJA2CPP_ERROR_METADATA_PARSE_ERROR,
    JINJA2CPP_ERROR_EXPECTED_STRING_LITERAL = 1001,
    JINJA2CPP_ERROR_EXPECTED_IDENTIFIER,
    JINJA2CPP_ERROR_EXPECTED_SQUARE_BRACKET,
    JINJA2CPP_ERROR_EXPECTED_ROUND_BRACKET,
    JINJA2CPP_ERROR_EXPECTED_CURLY_BRACKET,
    JINJA2CPP_ERROR_EXPECTED_TOKEN,
    JINJA2CPP_ERROR_EXPECTED_EXPRESSION,
    JINJA2CPP_ERROR_EXPECTED_END_OF_STATEMENT,
    JINJA2CPP_ERROR_EXPECTED_RAW_END,
    JINJA2CPP_ERROR_EXPECTED_META_END,
    JINJA2CPP_ERROR_UNEXPECTED_TOKEN,
    JINJA2CPP_ERROR_UNEXPECTED_STATEMENT,
    JINJA2CPP_ERROR_UNEXPECTED_COMMENT_BEGIN,
    JINJA2CPP_ERROR_UNEXPECTED_COMMENT_END,
    JINJA2CPP_ERROR_UNEXPECTED_EXPR_BEGIN,
    JINJA2CPP_ERROR_UNEXPECTED_EXPR_END,
    JINJA2CPP_ERROR_UNEXPECTED_STMT_BEGIN,
    JINJA2CPP_ERROR_UNEXPECTED_STMT_END,
    JINJA2CPP_ERROR_UNEXPECTED_RAW_BEGIN,
    JINJA2CPP_ERROR_UNEXPECTED_RAW_END,
    JINJA2CPP_ERROR_UNEXPECTED_META_BEGIN,
    JINJA2CPP_ERROR_UNEXPECTED_META_END
} jinja2cpp_error_code_t;

jinja2cpp_error_code_t jinja2cpp_error_info_get_code(const jinja2cpp_error_info_t* error_info);

const char* jinja2cpp_error_info_to_string(const jinja2cpp_error_info_t* error_info);

#ifdef __cplusplus
}
#endif

#endif // ERROR_INFO_WRAP_H